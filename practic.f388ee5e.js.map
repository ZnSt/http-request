{"mappings":"YAGA,IAAMA,EAAUC,SAASC,cAAc,UACjCC,EAASF,SAASC,cAAc,aAChCE,EAAYH,SAASC,cAAc,WAEzC,SAASG,EAAQC,EAASC,GACxB,OAAO,IAAIC,SAAQ,SAAAC,GACjBH,EAAQI,iBAAiBH,GAAW,WAClCE,EACE,UAAuCE,OAA7BJ,EAAU,qBAA4CI,OAAzBL,EAAQM,SAAS,UAAmBD,OAAXL,EAAQO,GAAG,YAMnF,SAASC,EAAaC,GACpBd,SAASe,KAAKC,mBACZ,YACA,iCACaN,OAARI,EAAQ,mBAKjBV,EAAQL,EAAS,SAASkB,KAAKJ,GAC/BT,EAAQF,EAAQ,SAASe,KAAKJ,GAC9BT,EAAQD,EAAW,SAASc,KAAKJ,G","sources":["src/js/practic.js"],"sourcesContent":["// Create a function waitFor that takes a DOM element and a string eventName, such as click. The function returns a Promise that should be resolved when eventName happened on the element with a message It was ${eventName} on the element: ${element.nodeName}, id: ${element.id}. (For example: It was click on the element: INPUT, id: login.)\n// Also create a function printMessage that takes a string message and adds <div class=\"message\"> with the message to the DOM\n\nconst loginEl = document.querySelector('#login');\nconst passEl = document.querySelector('#password');\nconst submitBtn = document.querySelector('#submit');\n\nfunction waitFor(element, eventName) {\n  return new Promise(resolve => {\n    element.addEventListener(eventName, () => {\n      resolve(\n        `It was ${eventName} on the element: ${element.nodeName}, id: ${element.id}.`\n      );\n    });\n  });\n}\n\nfunction printMessage(message) {\n  document.body.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"message\">\n    <p>${message}</p>\n  </div>`\n  );\n}\n\nwaitFor(loginEl, 'click').then(printMessage);\nwaitFor(passEl, 'click').then(printMessage);\nwaitFor(submitBtn, 'click').then(printMessage);\n"],"names":["$8e0eeffb220280bc$var$loginEl","document","querySelector","$8e0eeffb220280bc$var$passEl","$8e0eeffb220280bc$var$submitBtn","$8e0eeffb220280bc$var$waitFor","element","eventName","Promise","resolve","addEventListener","concat","nodeName","id","$8e0eeffb220280bc$var$printMessage","message","body","insertAdjacentHTML","then"],"version":3,"file":"practic.f388ee5e.js.map"}